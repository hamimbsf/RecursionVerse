// Why is recursion?

// ЁЯФБ Loop ржжрж┐рзЯрзЗ рзз ржерзЗржХрзЗ рзл ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓ (1 + 2 + 3 + 4 + 5) ржирж┐рж░рзНржгрзЯ:

// let sum = 0;
// for (let i = 1; i <= 5; i++) {
//   sum += i;
// }
// console.log(sum); // Output: 15

// ржПржЦрж╛ржирзЗ рж▓рзБржк ржПржХрзЗ ржПржХрзЗ рж╕ржм рж╕ржВржЦрзНржпрж╛рж░ ржЙржкрж░ ржХрж╛ржЬ ржХрж░рзЗ тАФ рзз ржпрзЛржЧ ржХрж░рзЗ, рждрж╛рж░ржкрж░ рзи, рждрж╛рж░ржкрж░ рзй... ржПржнрж╛ржмрзЗ рж╕ржмрж╢рзЗрж╖рзЗ рзл ржкрж░рзНржпржирзНржд ржкрзМржБржЫрзЗ ржпрж╛рзЯред

// ЁЯФД ржХрж┐ржирзНрждрзБ Recursion ржП ржмрзНржпрж╛ржкрж╛рж░ржЯрж╛ ржнрж┐ржирзНржи тАФ
// Recursion ржЕржирзЗржХржЯрж╛ ржПржоржи ржПржХржЬржи ржЪрж╛рж▓ржХрзЗрж░ ржорждрзЛ, рж╕рзЗ ржирж┐ржЬрзЗ рж╕ржм ржХрж░рзЗ ржирж╛,
// ржмрж░ржВ рж╕рзЗ ржмрж▓рзЗ тАФ тАЬрждрзБржорж┐ ржпржжрж┐ рзз ржерзЗржХрзЗ рзл ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓ ржЪрж╛ржУ, рждрж╛рж╣рж▓рзЗ ржЖржЧрзЗ рзз ржерзЗржХрзЗ рзк ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓ ржжрж╛ржУредтАЭ

// рждржЦржи рзк ржмрж▓ржмрзЗ тАФ тАЬржЖржорж╛ржХрзЗ рзз ржерзЗржХрзЗ рзй ржкрж░рзНржпржирзНржд ржжрж░ржХрж╛рж░тАЭ, рждрж╛рж░ржкрж░ рзй ржмрж▓ржмрзЗ тАФ тАЬржЖржорж╛ржХрзЗ рзз ржерзЗржХрзЗ рзи ржкрж░рзНржпржирзНржд ржжрж░ржХрж╛рж░тАЭ,
// рзи ржмрж▓ржмрзЗ тАФ тАЬржЖржорж╛ржХрзЗ рзз ржерзЗржХрзЗ рзз ржкрж░рзНржпржирзНржд ржжрж░ржХрж╛рж░тАЭ, ржПржмржВ рзз ржмрж▓ржмрзЗ тАФ тАЬржЖржорж┐ рждрзЛ ржЬрж╛ржирж┐ржЗ, ржЖржорж┐ рзз!тАЭ

// рждрж╛рж░ржкрж░ рж╕ржм рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржПржХрзЗ ржПржХрзЗ ржЙржкрж░рзЗ ржЙржарзЗ ржпрж╛ржмрзЗ:
// рзз тЖТ рзз + рзи тЖТ рзй + рзй тЖТ рзм + рзк тЖТ рззрзж + рзл тЖТ рззрзл

// ЁЯФБ Recursion ржжрж┐рзЯрзЗ рзз ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд ржпрзЛржЧржлрж▓ ржмрзЗрж░ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи

// function sumUpTo(n) {
//   if (n === 1) return 1; // ЁЯЯв Base Case: n ржпржжрж┐ рзз рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж░рж┐ржЯрж╛рж░рзНржи рзз
//   return n + sumUpTo(n - 1); // ЁЯФБ Recursive Step: ржирж┐ржЬрзЗржХрзЗ ржЫрзЛржЯ ржЗржиржкрзБржЯ ржжрж┐рзЯрзЗ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рзЗ
// }

// console.log(sumUpTo(5)); // Output: 15

/*
sumUpTo(5)
тФФтФАтФА 5 + sumUpTo(4)
    тФФтФАтФА 4 + sumUpTo(3)
        тФФтФАтФА 3 + sumUpTo(2)
            тФФтФАтФА 2 + sumUpTo(1)
                тФФтФАтФА 1  тЖР base case

Now returning...

2 + 1 = 3
3 + 3 = 6
4 + 6 = 10
5 + 10 = 15
*/

/* CALL STACK (During Execution):

| sumUpTo(1) | тЖР base case
| sumUpTo(2) |
| sumUpTo(3) |
| sumUpTo(4) |
| sumUpTo(5) | тЖР Top of stack

RETURNING BACKWARDS:

sumUpTo(1) тЖТ 1
sumUpTo(2) тЖТ 2 + 1 = 3
sumUpTo(3) тЖТ 3 + 3 = 6
sumUpTo(4) тЖТ 4 + 6 = 10
sumUpTo(5) тЖТ 5 + 10 = 15
 */

// ЁЯФН Deep Dive into Recursion

// ЁЯФБ рж▓рзБржкрзЗ ржпрзЗржоржи рж╢рзБрж░рзБ, рж╢рзЗрж╖ ржУ ржЗржиржХрзНрж░рж┐ржорзЗржирзНржЯ/ржбрж┐ржХрзНрж░рж┐ржорзЗржирзНржЯ ржерж╛ржХрзЗ,
// ржарж┐ржХ рждрзЗржоржиржЗ Recursion-ржПржУ рж╢рзБрж░рзБ, ржерж╛ржорж╛рж░ рж╢рж░рзНржд (base case), ржПржмржВ ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░рж╛рж░ ржзрж╛ржк ржерж╛ржХрзЗред

// ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛ ржпрж╛ржХ:

// function hello(val) {
//   if (val === 0) return; // ЁЯЫС Base Case: ржХржЦржи рж░рж┐ржХрж╛рж░рзНрж╢ржи ржерж╛ржоржмрзЗ
//   console.log("hello"); // тЬЕ ржХрж╛ржЬ: ржпрзЗржЯрж╛ ржЖржорж░рж╛ ржкрзНрж░рждрж┐ржмрж╛рж░ ржХрж░рждрзЗ ржЪрж╛ржЗ
//   hello(val - 1); // ЁЯФБ Recursive Call: ржЖржЧрзЗрж░ ржЕржмрж╕рзНржерж╛рж░ ржжрж┐ржХрзЗ ржПржЧрзЛржирзЛ (val ржХржорж┐рзЯрзЗ)
// }

// hello(5); // ЁЯФБ рж░рж┐ржХрж╛рж░рзНрж╢ржи рж╢рзБрж░рзБ

// ЁЯФБ What is Recursion?

// **Recursion** (ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐) рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ ржкрзНрж░рзЛржЧрзНрж░рж╛ржорж┐ржВ ржХрзМрж╢рж▓, ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи ржирж┐ржЬрзЗржХрзЗржЗ ржХрж▓ (call) ржХрж░рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржи ржХрж░рзЗред ржПржЯрж┐ ржпрждржХрзНрж╖ржг ржирж╛ ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╢рж░рзНржд (ржпрж╛ржХрзЗ Base Case ржмрж▓рж╛ рж╣ржпрж╝) ржкрзВрж░ржг рж╣ржпрж╝, рждрждржХрзНрж╖ржг ржЪрж▓рждрзЗ ржерж╛ржХрзЗред

// ## ЁЯУШ рж╕ржВржЬрзНржЮрж╛ (Definition):

// > **Recursion** is a technique where a function solves a small part of the problem and then calls itself to solve the remaining part тАФ until it reaches a base case.

// ЁЯСЙ ржмрж╛ржВрж▓рж╛рзЯ: **Recursion рж╣рж▓рзЛ ржПржоржи ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи ржпрзЗржЯрж╛ ржирж┐ржЬрзЗржХрзЗржЗ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рзЗ ржпрждржХрзНрж╖ржг ржирж╛ ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржерж╛ржорж╛рж░ рж╢рж░рзНржд (base case) ржкрзВрж░ржг рж╣рзЯред**

// ЁЯФН Recursion ржПрж░ рзйржЯрж┐ ржорзВрж▓ ржЕржВрж╢:

// 1. **Base Case (ржерж╛ржорж╛рж░ рж╢рж░рзНржд):**
//    ржпрзЗржЦрж╛ржирзЗ ржлрж╛ржВрж╢ржи ржЖрж░ ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░ржмрзЗ ржирж╛, ржЕрж░рзНржерж╛рзО рж░рж┐ржХрж╛рж░рзНрж╢ржирзЗрж░ рж╢рзЗрж╖ рж╕рзАржорж╛ред

// 2. **Recursive Call (ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░рж╛):**
//    ржпрзЗржЦрж╛ржирзЗ ржлрж╛ржВрж╢ржи ржирж┐ржЬрзЗржХрзЗржЗ ржЖржмрж╛рж░ ржХрж▓ ржХрж░рзЗ ржкрж░ржмрж░рзНрждрзА ржХрж╛ржЬрзЗрж░ ржЬржирзНржпред

// 3. **Progress (ржкрзНрж░рж╕рзЗрж╕ ржПржЧрж┐ржпрж╝рзЗ ржирзЗржУржпрж╝рж╛):**
//    ржкрзНрж░рждрж┐ ржзрж╛ржкрзЗ ржЗржиржкрзБржЯ ржПржоржиржнрж╛ржмрзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ рж╣ржмрзЗ ржпрж╛рждрзЗ base case ржПрж░ ржжрж┐ржХрзЗ ржПржЧрзЛржпрж╝ред

//  ЁЯза ржЙржжрж╛рж╣рж░ржг (Example):

// function countDown(n) {
//   if (n === 0) return; // ЁЯЫС Base case
//   console.log(n); // тЬЕ ржХрж╛ржЬ
//   countDown(n - 1); // ЁЯФБ Recursive call
// }

// countDown(5);

// тЭМ ржпржжрж┐ ржЖржорж░рж╛ condition ржирж╛ рж░рж╛ржЦрждрж╛ржо рждрж╛рж╣рж▓рзЗ ржХрж┐ рж╣рждрзЛ?

/* function countDown(n) {
  console.log(n);
  countDown(n - 1); // ржирж┐ржЬрзЗржХрзЗ ржмрж╛рж░ржмрж╛рж░ ржХрж▓ ржХрж░ржЫрзЗ, ржХрзЛржирзЛ ржерж╛ржорж╛рж░ рж╢рж░рзНржд ржирзЗржЗ
}
countDown(5); */

// тЪая╕П рждрж╛рж╣рж▓рзЗ ржХрзА рж╣рждрзЛ?

// ржкрзНрж░ржержорзЗ countDown(5) ржХрж▓ рж╣рждрзЛ тЖТ console: 5
// рждрж╛рж░ржкрж░ countDown(4) тЖТ console: 4
// ржПрж░ржкрж░ 3, 2, 1, 0, -1, -2 ... ржПржнрж╛ржмрзЗ ржЪрж▓рждрзЗржЗ ржерж╛ржХрждрзЛ
// ржкрзНрж░рждрж┐ржмрж╛рж░ржЗ ржПржХржЯрж╛ ржирждрзБржи execution context рждрзИрж░рж┐ рж╣рждрзЛ
// ржХрзЛржирзЛ base case ржирж╛ ржерж╛ржХрж╛рзЯ ржлрж╛ржВрж╢ржи ржХржЦржирзЛ ржерж╛ржоржд ржирж╛
// ржПржХрж╕ржорзЯ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗрж░ call stack full рж╣рзЯрзЗ ржпрзЗржд
// ржПржмржВ рждржЦржи RangeError: Maximum call stack size exceeded ржирж╛ржорзЗ ржПржХржЯрж╛ error ржжрж┐рждрзЛ

// current stack ржП ржЖржорж╛ржжрзЗрж░ ржбрж╛ржЯрж╛ рж░рж┐рж╕рж╛рж░рзНржн ржерж╛ржХрзЗ

// print n numbers using recursion

// function naturalNumbers(val) {
//   if (val === 0) return;
//   console.log(val);
//   naturalNumbers(val - 1); // ржарж┐ржХржнрж╛ржмрзЗ рзз ржХрж░рзЗ ржХржорзЗ ржпрж╛ржЪрзНржЫрзЗ
// }
// naturalNumbers(10);

// ржоржирзЗ ржкрзНрж░рж╢рзНржи рж╣рждрзЗ ржкрж╛рж░рзЗ тАФ val-- ржжрж┐рж▓рзЗ ржХрзА рж╣рждрзЛ?
// ржпрзЗржоржи: naturalNumbers(val--);

// рждрж╛рж╣рж▓рзЗ рж╕ржорж╕рзНржпрж╛ рж╣рждрзЛ ржХрж╛рж░ржг val-- ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ:
// ржкрзНрж░ржержорзЗ ржкрзБрж░рзЛржирзЛ ржорж╛ржиржЯрж╛ржЗ ржкрж╛ржарж╛ржмрзЗ ржлрж╛ржВрж╢ржирзЗ, рждрж╛рж░ржкрж░ ржХржорж╛ржмрзЗ

// ржлрж▓рзЗ recursion ржП ржмрж╛рж░ржмрж╛рж░ рж╕рзЗржЗ ржкрзБрж░рзЛржирзЛ ржорж╛ржиржЯрж╛ржЗ ржпрж╛ржмрзЗ
// ржпрзЗржоржи: 5, 5, 5, 5... ржорж╛ржирзЗ ржПржХрзЗржЗ ржмрж╛рж░ржмрж╛рж░ ржкрж╛ржарж╛ржмрзЗ
// ржПрждрзЗ ржХрж░рзЗ base case ржХржЦржирзЛржЗ true рж╣ржмрзЗ ржирж╛
// ржПржмржВ ржлрж╛ржВрж╢ржи ржХржЦржирзЛ ржерж╛ржоржмрзЗ ржирж╛ ЁЯШУ

// ржПржХрж╕ржорзЯ stack memory full рж╣рзЯрзЗ error (stack overflow) ржжрж┐ржмрзЗ

// рждрж╛ржЗ ржЖржорж╛ржжрзЗрж░ рж╕ржмрж╕ржорзЯ рж▓рзЗржЦрж╛ ржЙржЪрж┐ржд:
// naturalNumbers(val - 1); // ржПржЯрж╛ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржУ ржирж┐рж░рж╛ржкржж

// function naturalNumbers(val) {
//   if (val === 0) return;
//   console.log(val);
//   naturalNumbers(--val); // pre-decrement ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рж╛ржо
// }
// naturalNumbers(10);

// ЁЯдФ ржПржЦржи ржкрзНрж░рж╢рзНржи тАФ pre-decrement (--val) ржжрж┐рж▓рзЗ ржПржЯрж╛ ржарж┐ржХржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ ржХрзЗржи?

// тЬЕ ржХрж╛рж░ржг:
// --val ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ тАФ ржЖржЧрзЗ val ржПрж░ ржорж╛ржи рзз ржХржорж╛ржУ, рждрж╛рж░ржкрж░ рж╕рзЗржЗ updated ржорж╛ржиржЯрж╛ ржлрж╛ржВрж╢ржирзЗ ржкрж╛ржарж╛ржУ

// ржпрзЗржоржи: ржкрзНрж░ржержорзЗ 10 ржжрж┐рж▓рзЗ => --val рж╣ржмрзЗ 9, рждрж╛рж░ржкрж░ naturalNumbers(9) ржХрж▓ рж╣ржмрзЗ
// ржЖржмрж╛рж░ => --val рж╣ржмрзЗ 8, рждрж╛рж░ржкрж░ naturalNumbers(8) ржХрж▓ рж╣ржмрзЗ

// ржПржЗржнрж╛ржмрзЗ ржкрзНрж░рждрж┐ржмрж╛рж░ ржирждрзБржи ржУ ржХржорзЗ ржпрж╛ржУрзЯрж╛ ржнрзНржпрж╛рж▓рзБ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ,
// ржлрж▓рзЗ recursion ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ base case ржП ржкрзМржБржЫрзЗ ржпрж╛ржЪрзНржЫрзЗ ржПржмржВ ржерзЗржорзЗ ржпрж╛ржЪрзНржЫрзЗ

// ЁЯУМ ржпрзЗржЦрж╛ржирзЗ post-decrement (val--) ржПржХржЗ ржорж╛ржи ржмрж╛рж░ржмрж╛рж░ ржкрж╛ржарж╛ржд,
// рж╕рзЗржЦрж╛ржирзЗ pre-decrement (--val) ржорж╛ржи ржХржорж┐рзЯрзЗ ржкрж╛ржарж╛ржЪрзНржЫрзЗ тАФ that's why ржПржЯрж╛ ржХрж╛ржЬ ржХрж░ржЫрзЗ тЬЕ

// тЬЕ Recursively 1 ржерзЗржХрзЗ n ржкрж░рзНржпржирзНржд рж╕ржВржЦрзНржпрж╛ ржкрзНрж░рж┐ржирзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ

// function naturalNumbers(num) {
//   // ЁЯЫС base case: ржпржжрж┐ num 0 рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржлрж╛ржВрж╢ржи ржЖрж░ ржХрж▓ ржХрж░рж╛ рж╣ржмрзЗ ржирж╛
//   if (num === 0) return;

//   // ЁЯФБ ржлрж╛ржВрж╢ржи ржирж┐ржЬрзЗржЗ ржирж┐ржЬрзЗржХрзЗ ржХрж▓ ржХрж░ржЫрзЗ (recursion) ржХрж┐ржирзНрждрзБ ржЖржЧрзЗржЗ ржХрж░ржЫрзЗ
//   // ржПрж░ ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ: рж╕ржмржЧрзБрж▓рзЛ call stack ржП push рж╣ржмрзЗ ржпрждржХрзНрж╖ржг ржирж╛ base case ржорзЗрж▓рзЗ
//   naturalNumbers(num - 1);

//   // ЁЯЯв ржПржЦрж╛ржирзЗ console.log рж╣ржЪрзНржЫрзЗ рждржЦржиржЗ ржпржЦржи stack ржерзЗржХрзЗ function pop рж╣ржЪрзНржЫрзЗ
//   // ржЕрж░рзНржерж╛рзО, ржирж┐ржЪ ржерзЗржХрзЗ ржЙржкрж░рзЗрж░ ржжрж┐ржХрзЗ ржЖрж╕рж╛рж░ рж╕ржорзЯ print рж╣ржЪрзНржЫрзЗ
//   console.log(num);
// }
// naturalNumbers(10);
